function test_setConfigurationBasis_CISD(obj)

    % Initialization ======================================================
    obj.showSection('Configuration state basis with CISD (setConfigurationBasis)');

    % Default parameters ==================================================
    x                   =   1:5;
    SOB                 =   rand(8,5);
    Vext                =   QMol_DFT_Vext;
    CI                  =   QMol_CI_conv('display', false,  ...
                                'numberElectron',   4,      ...
                                'xspan',            x,      ...
                                'orbitalBasis',     SOB,    ...
                                'externalPotential',Vext,   ...
                                'type',             'CISD');
    CI.setConfigurationBasis;

    % Reference
    ref                 =   CI.configurationBasis(1,:);
    ref_th              =   [-1 -2 1 2];
    obj.showResult('reference (default)',all(sort(ref) == sort(ref_th)));

    % (single & double) excitations
    CSB                 =   unique(sort(CI.configurationBasis(2:end,:),2),'rows');
    CSB_th              =   unique(sort([-3 -2 1 2; -4 -2 1 2; -5 -2 1 2;   ... single excitations
                                         -1 -3 1 2; -1 -4 1 2; -1 -5 1 2;   ... 
                                         -1 -2 3 2; -1 -2 4 2; -1 -2 5 2;   ... 
                                         -1 -2 1 3; -1 -2 1 4; -1 -2 1 5;   ... 
                                         -3 -4 1 2; -3 -5 1 2; -4 -5 1 2;   ... double excitations (same spin)
                                         -1 -2 3 4; -1 -2 3 5; -1 -2 4 5;   ... 
                                         -3 -2 3 2; -3 -2 4 2; -3 -2 5 2;   ... double excitations (different spin)
                                         -4 -2 3 2; -4 -2 4 2; -4 -2 5 2;   ...
                                         -5 -2 3 2; -5 -2 4 2; -5 -2 5 2;   ...
                                         -3 -2 1 3; -3 -2 1 4; -3 -2 1 5;   ...
                                         -4 -2 1 3; -4 -2 1 4; -4 -2 1 5;   ...
                                         -5 -2 1 3; -5 -2 1 4; -5 -2 1 5;   ...
                                         -1 -3 3 2; -1 -3 4 2; -1 -3 5 2;   ...
                                         -1 -4 3 2; -1 -4 4 2; -1 -4 5 2;   ...
                                         -1 -5 3 2; -1 -5 4 2; -1 -5 5 2;   ...
                                         -1 -3 1 3; -1 -3 1 4; -1 -3 1 5;   ...
                                         -1 -4 1 3; -1 -4 1 4; -1 -4 1 5;   ...
                                         -1 -5 1 3; -1 -5 1 4; -1 -5 1 5],2),'rows');
    obj.showResult('configurationBasis (default)', all(size(CSB) == size(CSB_th)) && all(ref == ref_th,'all'));

    % User-defined parameters =============================================
    CI.set('reference',[-1 -3 1 2 3],'active',[-1 -2 -5 3 5 6]);
    CI.setConfigurationBasis;

    % Number of electrons
    obj.showResult('numberElectron (from reference)',CI.numberElectron == 5);

    % Configuration basis
    CSB                 =   unique(sort(CI.configurationBasis,2),'rows');
    CSB_th              =   unique(sort([-1 -3 1 2 3;                       ... reference
                                         -2 -3 1 2 3; -5 -3 1 2 3;          ... single excitation
                                         -1 -2 1 2 3; -1 -5 1 2 3;          ...
                                         -1 -3 5 2 3; -1 -3 6 2 3;          ... 
                                         -1 -3 1 5 3; -1 -3 1 6 3;          ... 
                                         -1 -3 1 2 5; -1 -3 1 2 6;          ... 
                                         -2 -5 1 2 3;                       ... double excitation (same spin)
                                         -1 -3 5 6 3; -1 -3 5 2 6; -1 -3 1 5 6;          ... 
                                         -2 -3 5 2 3; -2 -3 6 2 3; -2 -3 1 5 3; -2 -3 1 6 3; -2 -3 1 2 5; -2 -3 1 2 6;  ... double excitation (different spin)
                                         -5 -3 5 2 3; -5 -3 6 2 3; -5 -3 1 5 3; -5 -3 1 6 3; -5 -3 1 2 5; -5 -3 1 2 6;  ... 
                                         -1 -2 5 2 3; -1 -2 6 2 3; -1 -2 1 5 3; -1 -2 1 6 3; -1 -2 1 2 5; -1 -2 1 2 6;  ... 
                                         -1 -5 5 2 3; -1 -5 6 2 3; -1 -5 1 5 3; -1 -5 1 6 3; -1 -5 1 2 5; -1 -5 1 2 6],2),'rows');
    obj.showResult('configurationBasis (user defined)', all(size(CSB) == size(CSB_th)) && all(CSB == CSB_th,'all'));

    % Freezing orbitals 
    CI.set('frozen',[-1 3]);
    CI.setConfigurationBasis;

    CSB                 =   unique(sort(CI.configurationBasis,2),'rows');
    CSB_th              =   unique(sort([-1 -3 1 2 3;                       ... reference
                                         -1 -2 1 2 3; -1 -5 1 2 3;          ...
                                         -1 -3 5 2 3; -1 -3 6 2 3;          ... 
                                         -1 -3 1 5 3; -1 -3 1 6 3;          ... 
                                         -1 -3 5 6 3; ... 
                                         -1 -2 5 2 3; -1 -2 6 2 3; -1 -2 1 5 3; -1 -2 1 6 3;  ... 
                                         -1 -5 5 2 3; -1 -5 6 2 3; -1 -5 1 5 3; -1 -5 1 6 3],2),'rows'); % spin down
    obj.showResult('configurationBasis (with frozen)', all(size(CSB) == size(CSB_th)) && all(CSB == CSB_th,'all'));

    % noDouble constraint 
    CI.set('noDouble',5);
    CI.setConfigurationBasis;
    CSB                 =   unique(sort(CI.configurationBasis,2),'rows');
    CSB_th              =   unique(sort([-1 -3 1 2 3;                       ... reference
                                         -1 -2 1 2 3; -1 -5 1 2 3;          ...
                                         -1 -3 5 2 3; -1 -3 6 2 3;          ... 
                                         -1 -3 1 5 3; -1 -3 1 6 3;          ... 
                                         -1 -3 5 6 3; ... 
                                         -1 -2 5 2 3; -1 -2 6 2 3; -1 -2 1 5 3; -1 -2 1 6 3;  ... 
                                         -1 -5 6 2 3; -1 -5 1 6 3],2),'rows');
    obj.showResult('configurationBasis (with noDouble)', all(size(CSB) == size(CSB_th)) && all(CSB == CSB_th,'all'));

    % noEmpty constraint 
    CI.set('noEmpty',[3 5]);
    CI.setConfigurationBasis;
    CSB                 =   unique(sort(CI.configurationBasis,2),'rows');
    CSB_th              =   unique(sort([-1 -3 1 2 3;                       ... reference (noEmpty does not apply on it)
                                         -1 -5 1 2 3; -1 -3 5 2 3; -1 -3 1 5 3; -1 -3 5 6 3; ... 
                                         -1 -2 5 2 3; -1 -2 1 5 3;   ... 
                                         -1 -5 6 2 3; -1 -5 1 6 3],2),'rows');
    obj.showResult('configurationBasis (with noEmpty)', all(size(CSB) == size(CSB_th)) && all(CSB == CSB_th,'all'));

    % Multi-reference =====================================================
    CI.set('reference',[-1 -3 1 2 3; -1 -2 1 2 3],'active',[-1 -2 -5 3 5 6], ...
        'frozen',[-1 1 2],'noDouble',[],'noEmpty',[]);
    CI.setConfigurationBasis;

    CSB                 =   unique(sort(CI.configurationBasis,2),'rows');
    CSB_th              =   unique(sort([-1 -3 1 2 3; -1 -2 1 2 3;        ... reference
                                         -1 -5 1 2 3; -1 -3 1 2 5; -1 -3 1 2 6; ... single excitation
                                         -1 -2 1 2 5; -1 -2 1 2 6; ...
                                         -1 -5 1 2 5; -1 -5 1 2 6],2),'rows'); % double excitation
    obj.showResult('configurationBasis (multi-reference)', all(size(CSB) == size(CSB_th)) && all(CSB == CSB_th,'all'));

end

